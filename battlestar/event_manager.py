class Event:
    """
    A superclass for any events that might be generated by an
    object and sent to the EventManager.
    """

    def __init__(self):
        self.event = "Generic Event"

    def __str__(self):
        return self.event

    def quit(self):
        self.event = "Quite Event"

    def tick(self):
        self.event = "Tick Event"

    def initialise(self):
        """
        Tells all listeners to initialize themselves.
        This includes loading libraries and resources
        """
        self.event = "Initialise Event"


class InputEvent(Event):
    """ Keyboard or mouse input event """

    def __init__(self, unicode_char, click_pos):
        super().__init__()
        self.event = "Input Event"
        self.char = unicode_char
        self.click_pos = click_pos

    def __str__(self):
        return  '%s, char=%s, click_pos=%s' % (self.event, self.char, self.click_pos)


class EventManager:
    """ Coordinates communication between the MVC's """

    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()

    def register_listener(self, listener):
        """ Adds the listener to the listeners list """

        self.listeners[listener] = 1

    def unregister_listener(self, listener):
        """ Removes the listener from the listeners list """

        if listener in self.listeners.keys():
            del self.listeners[listener]

    def post(self, event):
        """
        Posts event to message queue and broadcast to all listeners
        """

        if not isinstance(event, Event.tick):
            # print the event (unless it is Event.tick
            print(str(event))

        for listener in self.listeners.keys():
            listener.notify(event)
